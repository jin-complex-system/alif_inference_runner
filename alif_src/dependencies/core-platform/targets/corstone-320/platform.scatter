/*
 * SPDX-FileCopyrightText: Copyright 2019-2024 Arm Limited and/or its affiliates <open-source-office@arm.com>
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * +-----------------------+-------------+-------------+----+--------------------------------------+
 * |  Memory region name   | Base addr   |    Size     |IDAU|  MCC load address + remarks          |
 * +-----------------------+-------------+-------------+----+--------------------------------------+
 * | ITCM                  | 0x0000_0000 | 0x0000_8000 | NS | 32 KiB                               |
 * | ITCM                  | 0x1000_0000 | 0x0000_8000 | S  | Secure alias for NS ITCM             |
 * | ROM                   | 0x1100_0000 | 0x0002_0000 | S  | 128 KiB                              |
 * | FPGA SRAM; BRAM       | 0x0100_0000 | 0x0020_0000 | NS | 2 MiB                                |
 * | FPGA SRAM; BRAM       | 0x1200_0000 | 0x0020_0000 | S  | Secure alias for NS BRAM             |
 * | DTCM                  | 0x2000_0000 | 0x0000_8000 | NS | 32 KiB                               |
 * | DTCM                  | 0x3000_0000 | 0x0000_8000 | S  | Secure alias for NS DTCM             |
 * | Internal SRAM         | 0x2100_0000 | 0x0040_0000 | NS | 2 banks of 2 MiB; 3 cycles latency   |
 * | Internal SRAM         | 0x3100_0000 | 0x0040_0000 | S  | Secure alias for NS internal SRAM    |
 * | QSPI Flash            | 0x2800_0000 | 0x0800_0000 | NS | 128 MiB QSPI Flash                   |
 * | QSPI Flash            | 0x3800_0000 | 0x0800_0000 | S  | Secure alias for NS QSPI Flash       |
 * | DDR1                  | 0x7000_0000 | 0x1000_0000 | S  | Secure 256 MiB bank #1               |
 * +-----------------------+-------------+-------------+----+--------------------------------------+
 *
 *  Notes:
 *   - Alias regions means that secure and non-secure addresses are mapped to the same physical
 *     memory banks.
 *   - QSPI is not modelled. 'QSPI Flash' is modelled as SRAM in FVP.
 *   - Only first 256MiB S DDR is mapped. Note that NS and S DDR memories are separate memories.
 */

/* default value - '1', for DRAM */
#ifndef ETHOSU_MODEL
#define ETHOSU_MODEL  1
#endif

/* default value - '1', for DRAM */
#ifndef ETHOSU_ARENA
#define ETHOSU_ARENA  1
#endif

#ifndef STACK_SIZE
#define STACK_SIZE 0x8000
#endif

#ifndef HEAP_SIZE
#define HEAP_SIZE 0x10000
#endif

#define ITCM_START 0x10000000
#define ITCM_SIZE  0x00008000

#define DTCM_START 0x30000000
#define DTCM_SIZE  0x00008000

#define ROM0_START 0x11000000
#define ROM0_SIZE  0x00020000

#define BRAM_START 0x12000000
#define BRAM_SIZE  0x00200000

#define SRAM_START 0x31000000
#define SRAM_SIZE  0x00400000

#define DDR_START  0x70000000
#define DDR_SIZE   0x10000000

#if STACK_SIZE > DTCM_SIZE
#error Stack size larger than DTCM size
#endif

/* ----------------------------------------------------------------------------
  Stack seal size definition
 *----------------------------------------------------------------------------*/

LOAD_BOOT ROM0_START ROM0_SIZE
{
    rom_boot ROM0_START ROM0_SIZE
    {
        *.o (RESET, +First)
    }

    ; Vector table relocation to read write memory
    ; Alignment requirement from up to 496 interrupts, rounded to the closest
    ; power of two equals 512 (words), thus 2048 bytes.
    VTABLE_RW ITCM_START ALIGN 2048 ITCM_SIZE
    {
        * (.vtable_rw, +First)
    }
}

APP_IMAGE BRAM_START BRAM_SIZE
{
    rom_exec BRAM_START BRAM_SIZE
    {
        *(InRoot$$Sections)
        startup_ARMCM85.o
        system_ARMCM85.o
        target.o
        .ANY1 (+RO +RW +ZI)
    }

    ARM_LIB_HEAP (BRAM_START + BRAM_SIZE - HEAP_SIZE) EMPTY ALIGN 8 HEAP_SIZE {}
    ARM_LIB_STACK DTCM_START EMPTY ALIGN 8 STACK_SIZE {}
}

; Place all SRAM and DDR execution regions in DDR. We have plenty of DDR
; and can perform scatter loading from here.
LOAD_REGION_DDR DDR_START DDR_SIZE
{
    ; Place model and its affiliates in DRAM
    rom_dram +0 ALIGN 16
    {
#if (ETHOSU_MODEL == 1)
        * (network_model_sec)
#endif
        * (input_data_sec)
        * (expected_output_data_sec)
        * (output_data_sec)

        * (ethosu_core_in_queue)
        * (ethosu_core_out_queue)
    }

#if (ETHOSU_ARENA == 1)
    ; Place tensor arena in DRAM if we have a fast memory area
    ARENA +0 UNINIT ALIGN 32
    {
        * (.bss.tensor_arena)
    }
#endif

    SRAM SRAM_START ALIGN 32 SRAM_SIZE
    {
#if (ETHOSU_ARENA == 0)
        ; Place tensor arena in SRAM
        * (.bss.tensor_arena)
#endif

#if (ETHOSU_MODEL == 0)
        ; Place network model in SRAM
        * (network_model_sec)
#endif

        ; Reserve fast scratch/fast memory buffer in SRAM
        ; This is meant to be the "dedicated SRAM" for the NPU
        * (.bss.ethosu_scratch)

        ; SRAM data
        * (.sram.data)
    }
}
